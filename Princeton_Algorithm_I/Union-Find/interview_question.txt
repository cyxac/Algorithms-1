1. <b>Social network connectivity.</b> Given a social network containing $$N$$ members and a log file containing $$M$$ timestamps
at which times pairs of members formed friendships, design an algorithm to determine the earliest time at which all members are 
connected (i.e., every member is a friend of a friend of a friend ... of a friend). Assume that the log file is sorted by 
timestamp and that friendship is an equivalence relation. The running time of your algorithm should be $$M \log N$$ or better 
and use extra space proportional to $$N$$.

Hint: union-find.


2. <b>Union-find with specific canonical element.</b> Add a method <tt>find()</tt> to the union-find data type so that <tt>find(i)
</tt> returns the largest element in the connected component containing <tt>i</tt>. The operations, <tt>union()</tt>, <tt>
connected()</tt>, and <tt>find()</tt> should all take logarithmic time or better.
For example, if one of the connected components is $$\{1, 2, 6, 9\}$$, then the <tt>find()</tt> method should return $$9$$ for 
each of the four elements in the connected components.

Hint: maintain an extra array to the weighted quick-union data structure that stores for each root i the large element in the connected component containing i.


3. Successor with delete. Given a set of N integers S={0,1,...,N−1} and a sequence of requests of the following form:
Remove x from S
Find the successor of x: the smallest y in S such that y≥x.
design a data type so that all operations (except construction) should take logarithmic time or better.

Hint: use the modification of the union-find data discussed in the previous question.

4. Union-by-size. Develop a union-find implementation that uses the same basic strategy as weighted quick-union but keeps track 
of tree height and always links the shorter tree to the taller one. Prove a lgN upper bound on the height of the trees for N 
sites with your algorithm.

Hint: replace the sz[] array with a ht[] array such that ht[i] stores the height of the subtree rooted at i.

