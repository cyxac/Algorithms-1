Question 1
3-SUM in quadratic time. 
Design an algorithm for the 3-SUM problem that takes time proportional to N^2 in the worst case. 
You may assume that you can sort the N integers in time proportional to N^2 or better.

Hint: given an integer x and a sorted array a[] of N distinct integers, design a linear-time algorithm to determine if there 
exists two distinct indices i and j such that a[i] + a[j] == x.

Question 2
Search in a bitonic array. 
An array is bitonic if it is comprised of an increasing sequence of integers followed immediately by a decreasing sequence of integers. Write a program that, 
given a bitonic array of N distinct integer values, determines whether a given integer is in the array.
Standard version: Use ∼3lgN compares in the worst case.
Signing bonus: Use ∼2lgN compares in the worst case (and prove that no algorithm can guarantee to perform fewer than ∼2lgN compares in the worst case).

Hints:
Standard version. First, find the maximum integer using ∼1lgN compares—this divides the array into the increasing and decreasing pieces.
Signing bonus. Do it without finding the maximum integer.

* Question 3
Egg drop. Suppose that you have an N-story building (with floors 1 through N) and plenty of eggs. An egg breaks if it is 
dropped from floor T or higher and does not break otherwise. Your goal is to devise a strategy to determine the value of 
T given the following limitations on the number of eggs and tosses:
Version 0: 1 egg, ≤T tosses.
Version 1: ∼1lgN eggs and ∼1lgN tosses.
Version 2: ∼lgT eggs and ∼2lgT tosses.
Version 3: 2 eggs and ∼2N^0.5 tosses.
Version 4: 2 eggs and ≤cT^0.5 tosses for some fixed constant c.

Hints:
Version 0: sequential search.
Version 1: binary search.
Version 2: find an interval containing T of size ≤2T, then do binary search.
Version 3: find an interval of size N‾‾√, then do sequential search. Note: can be improved to ∼2N‾‾‾√ tosses.
Version 4: 1+2+3+…+t∼12t2. Aim for c=22‾‾√.



